#!/usr/bin/env python3
"""
Docker Browser Test Suite
=========================

Comprehensive testing for browser automation in Docker containers.
Tests Chrome/Chromium installation, Selenium integration, and research capabilities.
"""

import os
import sys
import time
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# Add scripts directory to path for imports
sys.path.append('/app/scripts')

try:
    from browser_config import DockerBrowserConfig, BrowserContextManager, test_browser_setup
    from research_browser import ResearchBrowser, test_research_browser
except ImportError as e:
    print(f"⚠️  Import error: {e}")
    print("Running basic tests without advanced features...")


class DockerBrowserTestSuite:
    """Comprehensive test suite for Docker browser setup."""
    
    def __init__(self):
        self.results = {}\n        self.errors = []\n        \n    def run_all_tests(self) -> Dict[str, bool]:\n        \"\"\"Run all browser tests and return results.\"\"\"\n        print(\"🧪 Starting Docker Browser Test Suite\")\n        print(\"=\" * 50)\n        \n        tests = [\n            (\"Environment Check\", self.test_environment),\n            (\"System Dependencies\", self.test_system_dependencies),\n            (\"Python Dependencies\", self.test_python_dependencies),\n            (\"Virtual Display\", self.test_virtual_display),\n            (\"Chrome Installation\", self.test_chrome_installation),\n            (\"ChromeDriver\", self.test_chromedriver),\n            (\"Selenium Basic\", self.test_selenium_basic),\n            (\"Browser Configuration\", self.test_browser_config),\n            (\"Cookie Management\", self.test_cookie_management),\n            (\"Research Browser\", self.test_research_functionality)\n        ]\n        \n        for test_name, test_func in tests:\n            print(f\"\\n🔧 Running: {test_name}\")\n            try:\n                result = test_func()\n                self.results[test_name] = result\n                status = \"✅ PASS\" if result else \"❌ FAIL\"\n                print(f\"   {status}\")\n            except Exception as e:\n                self.results[test_name] = False\n                self.errors.append(f\"{test_name}: {str(e)}\")\n                print(f\"   ❌ ERROR: {e}\")\n        \n        self.print_summary()\n        return self.results\n    \n    def test_environment(self) -> bool:\n        \"\"\"Test Docker environment variables.\"\"\"\n        required_vars = {\n            'DISPLAY': ':99',\n            'CHROME_BIN': '/usr/bin/chromium-browser'\n        }\n        \n        for var, expected in required_vars.items():\n            actual = os.getenv(var)\n            if not actual:\n                print(f\"   ⚠️  Missing environment variable: {var}\")\n                return False\n            if expected and actual != expected:\n                print(f\"   ⚠️  {var}={actual}, expected {expected}\")\n        \n        return True\n    \n    def test_system_dependencies(self) -> bool:\n        \"\"\"Test system-level dependencies.\"\"\"\n        dependencies = [\n            ('/usr/bin/chromium-browser', 'Chromium browser'),\n            ('/usr/bin/chromedriver', 'ChromeDriver'),\n            ('/usr/bin/Xvfb', 'Virtual display server')\n        ]\n        \n        missing = []\n        for path, name in dependencies:\n            if not os.path.exists(path):\n                missing.append(f\"{name} at {path}\")\n                print(f\"   ❌ Missing: {name} at {path}\")\n        \n        if missing:\n            return False\n        \n        # Test chromium version\n        try:\n            result = subprocess.run(\n                ['/usr/bin/chromium-browser', '--version'],\n                capture_output=True, text=True, timeout=10\n            )\n            if result.returncode == 0:\n                print(f\"   📦 {result.stdout.strip()}\")\n            else:\n                print(f\"   ⚠️  Chromium version check failed\")\n                return False\n        except Exception as e:\n            print(f\"   ⚠️  Chromium version check error: {e}\")\n            return False\n        \n        return True\n    \n    def test_python_dependencies(self) -> bool:\n        \"\"\"Test Python package dependencies.\"\"\"\n        required_packages = [\n            'selenium',\n            'browser_cookie3',\n            'requests'\n        ]\n        \n        missing = []\n        for package in required_packages:\n            try:\n                __import__(package)\n                print(f\"   ✅ {package}\")\n            except ImportError:\n                missing.append(package)\n                print(f\"   ❌ Missing: {package}\")\n        \n        return len(missing) == 0\n    \n    def test_virtual_display(self) -> bool:\n        \"\"\"Test virtual display functionality.\"\"\"\n        try:\n            # Check if DISPLAY is set\n            display = os.getenv('DISPLAY')\n            if not display:\n                print(\"   ❌ DISPLAY environment variable not set\")\n                return False\n            \n            # Try to start Xvfb if not running\n            result = subprocess.run(\n                ['pgrep', 'Xvfb'],\n                capture_output=True, text=True\n            )\n            \n            if result.returncode != 0:\n                print(\"   🔄 Starting Xvfb...\")\n                subprocess.Popen(\n                    ['Xvfb', ':99', '-screen', '0', '1024x768x24'],\n                    stdout=subprocess.DEVNULL,\n                    stderr=subprocess.DEVNULL\n                )\n                time.sleep(3)\n            \n            # Verify Xvfb is running\n            result = subprocess.run(\n                ['pgrep', 'Xvfb'],\n                capture_output=True, text=True\n            )\n            \n            if result.returncode == 0:\n                print(f\"   ✅ Xvfb running (PID: {result.stdout.strip()})\")\n                return True\n            else:\n                print(\"   ❌ Xvfb not running\")\n                return False\n                \n        except Exception as e:\n            print(f\"   ❌ Virtual display test failed: {e}\")\n            return False\n    \n    def test_chrome_installation(self) -> bool:\n        \"\"\"Test Chrome/Chromium installation.\"\"\"\n        try:\n            chrome_bin = os.getenv('CHROME_BIN', '/usr/bin/chromium-browser')\n            \n            # Test chrome executable\n            result = subprocess.run(\n                [chrome_bin, '--headless', '--disable-gpu', '--dump-dom', 'data:text/html,<html><body>Test</body></html>'],\n                capture_output=True, text=True, timeout=15\n            )\n            \n            if result.returncode == 0 and 'Test' in result.stdout:\n                print(\"   ✅ Chrome can render HTML\")\n                return True\n            else:\n                print(f\"   ❌ Chrome test failed (exit code: {result.returncode})\")\n                if result.stderr:\n                    print(f\"   Error: {result.stderr[:200]}...\")\n                return False\n                \n        except subprocess.TimeoutExpired:\n            print(\"   ❌ Chrome test timed out\")\n            return False\n        except Exception as e:\n            print(f\"   ❌ Chrome test error: {e}\")\n            return False\n    \n    def test_chromedriver(self) -> bool:\n        \"\"\"Test ChromeDriver functionality.\"\"\"\n        try:\n            result = subprocess.run(\n                ['/usr/bin/chromedriver', '--version'],\n                capture_output=True, text=True, timeout=10\n            )\n            \n            if result.returncode == 0:\n                print(f\"   📦 {result.stdout.strip()}\")\n                return True\n            else:\n                print(f\"   ❌ ChromeDriver version check failed\")\n                return False\n                \n        except Exception as e:\n            print(f\"   ❌ ChromeDriver test error: {e}\")\n            return False\n    \n    def test_selenium_basic(self) -> bool:\n        \"\"\"Test basic Selenium functionality.\"\"\"\n        try:\n            from selenium import webdriver\n            from selenium.webdriver.chrome.options import Options\n            from selenium.webdriver.chrome.service import Service\n            \n            options = Options()\n            options.add_argument('--headless=new')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            options.add_argument('--disable-gpu')\n            \n            chrome_bin = os.getenv('CHROME_BIN', '/usr/bin/chromium-browser')\n            options.binary_location = chrome_bin\n            \n            service = Service('/usr/bin/chromedriver')\n            \n            driver = webdriver.Chrome(service=service, options=options)\n            \n            # Test navigation\n            driver.get('data:text/html,<html><body><h1>Selenium Test</h1></body></html>')\n            title = driver.title\n            page_source = driver.page_source\n            \n            driver.quit()\n            \n            if 'Selenium Test' in page_source:\n                print(\"   ✅ Selenium can control browser and extract content\")\n                return True\n            else:\n                print(\"   ❌ Selenium content extraction failed\")\n                return False\n                \n        except Exception as e:\n            print(f\"   ❌ Selenium test error: {e}\")\n            return False\n    \n    def test_browser_config(self) -> bool:\n        \"\"\"Test browser configuration module.\"\"\"\n        try:\n            # Test basic import and initialization\n            config = DockerBrowserConfig()\n            \n            # Test directory creation\n            if not config.user_data_dir.exists():\n                print(\"   ❌ User data directory not created\")\n                return False\n            \n            if not config.cookies_dir.exists():\n                print(\"   ❌ Cookies directory not created\")\n                return False\n            \n            # Test Chrome options\n            options = config.chrome_options\n            arguments = [arg for arg in options.arguments]\n            \n            required_args = ['--no-sandbox', '--disable-dev-shm-usage', '--headless=new']\n            missing_args = [arg for arg in required_args if arg not in arguments]\n            \n            if missing_args:\n                print(f\"   ❌ Missing Chrome arguments: {missing_args}\")\n                return False\n            \n            print(\"   ✅ Browser configuration valid\")\n            return True\n            \n        except Exception as e:\n            print(f\"   ❌ Browser config test error: {e}\")\n            return False\n    \n    def test_cookie_management(self) -> bool:\n        \"\"\"Test cookie save/load functionality.\"\"\"\n        try:\n            config = DockerBrowserConfig()\n            \n            with BrowserContextManager(config) as driver:\n                # Navigate to a test page\n                driver.get('data:text/html,<html><body>Cookie Test</body></html>')\n                \n                # Add a test cookie\n                driver.add_cookie({\n                    'name': 'test_cookie',\n                    'value': 'test_value',\n                    'domain': 'localhost'\n                })\n                \n                # Get cookies\n                cookies = driver.get_cookies()\n                \n                if not cookies:\n                    print(\"   ❌ No cookies found\")\n                    return False\n                \n                # Test cookie file operations\n                test_domain = 'test.example.com'\n                config.save_cookies(driver, test_domain)\n                \n                cookie_file = config.cookies_dir / f\"{test_domain}_cookies.json\"\n                if not cookie_file.exists():\n                    print(\"   ❌ Cookie file not created\")\n                    return False\n                \n                print(\"   ✅ Cookie management working\")\n                return True\n                \n        except Exception as e:\n            print(f\"   ❌ Cookie management test error: {e}\")\n            return False\n    \n    def test_research_functionality(self) -> bool:\n        \"\"\"Test research browser functionality.\"\"\"\n        try:\n            # Test research browser initialization\n            browser = ResearchBrowser()\n            \n            # Test basic configuration\n            if not browser.config:\n                print(\"   ❌ Research browser config not initialized\")\n                return False\n            \n            if not browser.output_dir.exists():\n                print(\"   ❌ Research output directory not created\")\n                return False\n            \n            # Test domain configuration\n            if 'arxiv' not in browser.research_domains:\n                print(\"   ❌ ArXiv domain configuration missing\")\n                return False\n            \n            print(\"   ✅ Research browser configuration valid\")\n            \n            # Optional: Test actual search (commented out to avoid external requests)\n            # results = browser.search_papers(\"test query\", domains=['arxiv'], max_results=1)\n            # return len(results.get('arxiv', [])) >= 0\n            \n            return True\n            \n        except Exception as e:\n            print(f\"   ❌ Research functionality test error: {e}\")\n            return False\n    \n    def print_summary(self):\n        \"\"\"Print test results summary.\"\"\"\n        print(\"\\n\" + \"=\" * 50)\n        print(\"📊 TEST RESULTS SUMMARY\")\n        print(\"=\" * 50)\n        \n        passed = sum(1 for result in self.results.values() if result)\n        total = len(self.results)\n        \n        print(f\"Total Tests: {total}\")\n        print(f\"Passed: {passed} ✅\")\n        print(f\"Failed: {total - passed} ❌\")\n        print(f\"Success Rate: {(passed/total)*100:.1f}%\")\n        \n        if self.errors:\n            print(\"\\n❌ ERRORS:\")\n            for error in self.errors:\n                print(f\"  - {error}\")\n        \n        print(\"\\n🔧 DETAILED RESULTS:\")\n        for test_name, result in self.results.items():\n            status = \"✅ PASS\" if result else \"❌ FAIL\"\n            print(f\"  {test_name}: {status}\")\n        \n        # Docker-specific recommendations\n        if passed < total:\n            print(\"\\n🔧 TROUBLESHOOTING TIPS:\")\n            print(\"  - Ensure Docker container has sufficient memory (2GB+)\")\n            print(\"  - Check that --shm-size=2g is set in docker run\")\n            print(\"  - Verify /dev/shm is mounted correctly\")\n            print(\"  - Ensure DISPLAY variable is set to :99\")\n            print(\"  - Try rebuilding Docker image with --no-cache\")\n    \n    def generate_report(self) -> str:\n        \"\"\"Generate a detailed test report.\"\"\"\n        report = {\n            'timestamp': time.time(),\n            'environment': {\n                'display': os.getenv('DISPLAY'),\n                'chrome_bin': os.getenv('CHROME_BIN'),\n                'container': os.path.exists('/.dockerenv')\n            },\n            'results': self.results,\n            'errors': self.errors,\n            'summary': {\n                'total_tests': len(self.results),\n                'passed': sum(1 for r in self.results.values() if r),\n                'failed': sum(1 for r in self.results.values() if not r)\n            }\n        }\n        \n        return json.dumps(report, indent=2)\n\n\ndef main():\n    \"\"\"Main test runner.\"\"\"\n    print(\"🐳 Docker Browser Test Suite\")\n    print(f\"🐍 Python: {sys.version}\")\n    print(f\"📁 Working Directory: {os.getcwd()}\")\n    print(f\"🖥️  Display: {os.getenv('DISPLAY', 'Not set')}\")\n    print(f\"🌐 Chrome Binary: {os.getenv('CHROME_BIN', 'Not set')}\")\n    \n    suite = DockerBrowserTestSuite()\n    results = suite.run_all_tests()\n    \n    # Save test report\n    report_file = Path('/app/output/browser_test_report.json')\n    report_file.parent.mkdir(parents=True, exist_ok=True)\n    \n    with open(report_file, 'w') as f:\n        f.write(suite.generate_report())\n    \n    print(f\"\\n📄 Detailed report saved to: {report_file}\")\n    \n    # Exit with appropriate code\n    success_rate = sum(1 for r in results.values() if r) / len(results)\n    exit_code = 0 if success_rate >= 0.8 else 1\n    \n    print(f\"\\n🎯 Exit Code: {exit_code} ({'Success' if exit_code == 0 else 'Failure'})\")\n    sys.exit(exit_code)\n\n\nif __name__ == \"__main__\":\n    main()